# -*- coding: utf-8 -*-
"""
Created on Tue Sep  9 22:04:21 2025


[Module_Data_Flow.py]

–ü–µ—Ä–≤—ã–π –ú–æ–¥—É–ª—å –≤ –¢–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ -- –µ–≥–æ –∑–∞–¥–∞—á–∞ —ç—Ç–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö
–ü–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –æ—Ç –±–∏—Ä–∂–∏ –ø–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É(-–∞–º)


Binance:
wss://fstream.binance.com/ws/btcusdt@depth == Order Book (Depth stream)‚Üí –ø–æ—Ç–æ–∫ –∞–ø–¥–µ–π—Ç–æ–≤ –ø–æ bid/ask —Å—Ç–∞–∫–∞–Ω—É (–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏).
wss://fstream.binance.com/ws/btcusdt@trade == Trades stream ‚Üí –∫–∞–∂–¥–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: —Ü–µ–Ω–∞, –æ–±—ä—ë–º, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (buy/sell).
wss://fstream.binance.com/ws/btcusdt@kline_1m == –°–≤–µ—á–∏ ‚Üí OHLC + Volume

"""


import asyncio
import json
import websockets

from datetime import datetime, timezone

class BinanceDataFlow:
    def __init__(self, symbols, on_trade, stop_event: asyncio.Event):
        self.symbols = symbols
        self.on_trade = on_trade
        self.stop_event = stop_event
        self.ws = None

    async def _connect(self):
        streams = "/".join([f"{s}@trade" for s in self.symbols])
        url = f"wss://fstream.binance.com/stream?streams={streams}"
        print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {url}")
        self.ws = await websockets.connect(url)
        return self.ws

    async def _listen(self):
        try:
            async for message in self.ws:
                if self.stop_event.is_set():
                    break  # –º—è–≥–∫–∏–π –≤—ã—Ö–æ–¥
                data = json.loads(message)
                payload = data.get("data", {})

                trade = {
                    "timestamp": datetime.fromtimestamp(payload.get("T") / 1000, tz=timezone.utc),
                    "price": float(payload.get("p", 0)),
                    "qty": float(payload.get("q", 0)),
                    "side": "buy" if payload.get("m") is False else "sell"
                }

                await self.on_trade(trade, payload.get("s", "").lower())
        except asyncio.CancelledError:
            print("üõë –ó–∞–¥–∞—á–∞ _listen –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ _listen: {e}")
        finally:
            if self.ws:
                await self.ws.close()
                print("üîå WebSocket –∑–∞–∫—Ä—ã—Ç")

    async def run(self):
        while not self.stop_event.is_set():
            try:
                await self._connect()
                await self._listen()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

        # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ stop_event
        if self.ws:
            try:
                await self.ws.close()
                print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (stop_event)")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")