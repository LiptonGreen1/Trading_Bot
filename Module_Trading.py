# -*- coding: utf-8 -*-
"""
Created on Sat Sep 13 18:06:35 2025


[Module_Trading.py]

"""

import datetime
import json
import uuid
from binance.client import Client
from binance.enums import *

class TradeExecutor:
    def __init__(self, config_path="config.json"):
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
        with open(config_path, "r") as f:
            cfg = json.load(f)

        self.api_key = cfg["api_key"]
        self.api_secret = cfg["api_secret"]
        self.testnet = cfg.get("testnet", True)

        # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ binance futures
        self.client = Client(self.api_key, self.api_secret, testnet=self.testnet)

        # –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        self.active_trades = {}

        print(f"‚úÖ TradeExecutor –ø–æ–¥–∫–ª—é—á—ë–Ω (testnet={self.testnet})")

    def on_signal(self, signal: dict):
        """
        –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –º–æ–¥–µ–ª–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –Ω–∞ Binance Futures
        """
        trade_id = str(uuid.uuid4())[:8]
        symbol = signal["symbol"].upper()
        direction = signal["direction"]
        target_move = signal.get("target_move", 0.005)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5%
        qty = signal.get("qty", 0.001)  # —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (BTC: 0.001, ETH: 0.01 –∏ —Ç.–ø.)
        now = datetime.datetime.utcnow().isoformat()

        side = SIDE_BUY if direction.lower() == "buy" else SIDE_SELL

        try:
            order = self.client.futures_create_order(
                symbol=symbol.upper(),
                type=FUTURE_ORDER_TYPE_MARKET,
                side=side,
                quantity=qty
            )

            print(f"üìà [{now}] OPEN {direction.upper()} {qty} {symbol} "
                  f"| target move {target_move*100:.2f}% | Binance orderId={order['orderId']}")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
            self.active_trades[trade_id] = {
                "symbol": symbol,
                "direction": direction,
                "opened_at": now,
                "target_move": target_move,
                "status": "OPEN",
                "binance_order": order
            }

            return trade_id

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None

    def list_trades(self):
        """
        –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        """
        return self.active_trades